// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// generator erd {
//     provider                  = "prisma-erd-generator"
//     output                    = "erd.pdf"
//     includeRelationFromFields = true
// }

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id          String     @id @default(cuid())
    title       String     @db.Text
    description String?    @db.Text
    topicId     String
    feature     String?    @db.Text
    content     String     @db.Text
    published   Boolean    @default(false)
    authorId    String
    comment     Comment[]
    reaction    Reaction[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    report      Report[]
    readList    ReadList[]

    author User  @relation(fields: [authorId], references: [id])
    topic  Topic @relation(fields: [topicId], references: [id])

    @@index([authorId])
    @@index([topicId])
}

model Topic {
    id        String      @id @default(cuid())
    name      String      @unique
    post      Post[]
    userTopic UserTopic[]
}

model UserTopic {
    userId  String
    topicId String

    user  User  @relation(fields: [userId], references: [id])
    topic Topic @relation(fields: [topicId], references: [id])

    @@id([userId, topicId])
    @@index([userId])
    @@index([topicId])
}

model Reaction {
    postId String
    userId String

    post Post @relation(fields: [postId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@id([postId, userId])
    @@index([postId])
    @@index([userId])
}

model Comment {
    authorId  String
    postId    String
    comment   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    post   Post @relation(fields: [postId], references: [id])
    author User @relation(fields: [authorId], references: [id])

    @@id([authorId, postId])
    @@index([postId])
    @@index([authorId])
}

model Report {
    postId    String
    userId    String
    reason    String
    createdAt DateTime @default(now())

    post Post @relation(fields: [postId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@id([postId, userId])
    @@index([postId])
    @@index([userId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    password      String?
    image         String?
    role          Role        @default(USER)
    status        Status      @default(ACTIVE)
    accounts      Account[]
    followedBy    Follows[]   @relation("following")
    following     Follows[]   @relation("follower")
    post          Post[]
    reaction      Reaction[]
    comment       Comment[]
    sessions      Session[]
    registerdAt   DateTime    @default(now())
    bio           String?
    report        Report[]
    readList      ReadList[]
    userTopic     UserTopic[]
}

model ReadList {
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    postId    String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@id([userId, postId])
    @@index([userId])
    @@index([postId])
}

enum Role {
    USER
    ADMIN
    ANONYMOUS
}

enum Status {
    ACTIVE
    INACTIVE
    DELETED
}

model Follows {
    followerId  String
    followingId String

    follower  User @relation("follower", fields: [followerId], references: [id])
    following User @relation("following", fields: [followingId], references: [id])

    @@id([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
